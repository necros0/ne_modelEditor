/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * UVMapEditor.java
 *
 * Created on Aug 12, 2012, 2:31:25 PM
 */
package GuiComponents;

import ModelFormat.ModelFormat;
import OpenGL.OpenGL3DView;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.KeyStroke;

/**
 *
 * @author cjones
 */
public class UVMapEditor extends javax.swing.JFrame
{
	private MainGui mainGui;
	private OpenGL3DView OpenGLDisplay;
	private ModelFormat model;
	private boolean isRMBPressed, isLMBPressed;
	private int lastMouseX, lastMouseY;
	private long lastZoomTime;

	/** Creates new form UVMapEditor */
	public UVMapEditor(ModelFormat _model, MainGui mainGui)
	{
		this.setTitle("UV Mapping");
		this.model = _model;
		this.mainGui = mainGui;
		this.OpenGLDisplay = mainGui.getOpenGLDisplay();
		initComponents();

		//<editor-fold defaultstate="collapsed" desc="Shortcut key actions">
		//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
		Action closeAction = new AbstractAction()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				UVMapEditor.this.dispose();
			}
		};
		setShortcutKey("Escape", KeyEvent.VK_ESCAPE, 0, closeAction);
		//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
		Action undoAction = new AbstractAction()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				uvPanel.undo();
				uvPanel.repaint();
			}
		};
		setShortcutKey("Ctrl+Z", KeyEvent.VK_Z, KeyEvent.CTRL_DOWN_MASK, undoAction);
		//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
		Action vertexModeAction = new AbstractAction()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				modeButton_vertex.setSelected(true);
				UVMapEditor.this.mainGui.setEditingMode(MainGui.MODE_VERTEX);
				setModeButtonStates();
			}
		};
		setShortcutKey("1", KeyEvent.VK_1, 0, vertexModeAction);
		//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
		Action edgeModeAction = new AbstractAction()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				modeButton_edge.setSelected(true);
				UVMapEditor.this.mainGui.setEditingMode(MainGui.MODE_EDGE);
				setModeButtonStates();
			}
		};
		setShortcutKey("2", KeyEvent.VK_2, 0, edgeModeAction);
		//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
		Action faceModeAction = new AbstractAction()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				modeButton_face.setSelected(true);
				UVMapEditor.this.mainGui.setEditingMode(MainGui.MODE_FACE);
				setModeButtonStates();

			}
		};
		setShortcutKey("3", KeyEvent.VK_3, 0, faceModeAction);
		//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
		//</editor-fold>

		this.setModeButtonStates();

		uvPanel.setModel(model);
		uvPanel.setOpenGL(OpenGLDisplay); //link to the 3d window so we can update vertex selections
		uvPanel.repaint();

		this.setVisible(true);
	}

	private void setShortcutKey(String keyStrokeName, int keyEvent, int modifierMask, Action action)
	{
		KeyStroke keyStroke = KeyStroke.getKeyStroke(keyEvent, modifierMask, false);
		this.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(keyStroke, keyStrokeName);
		this.getRootPane().getActionMap().put(keyStrokeName, action);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        uvPanel = new UVMapPanel(this.mainGui);
        button_ok = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        modeButton_vertex = new javax.swing.JToggleButton();
        modeButton_edge = new javax.swing.JToggleButton();
        modeButton_face = new javax.swing.JToggleButton();
        button_growSelection = new javax.swing.JButton();
        button_shrinkSelection = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                mouseWheelMoved_zoom(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });

        uvPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        uvPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                uvPanelMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                uvPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                uvPanelMouseReleased(evt);
            }
        });
        uvPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                uvPanelMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                uvPanelMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout uvPanelLayout = new javax.swing.GroupLayout(uvPanel);
        uvPanel.setLayout(uvPanelLayout);
        uvPanelLayout.setHorizontalGroup(
            uvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 434, Short.MAX_VALUE)
        );
        uvPanelLayout.setVerticalGroup(
            uvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 388, Short.MAX_VALUE)
        );

        button_ok.setText("Ok");
        button_ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_okActionPerformed(evt);
            }
        });

        jToolBar1.setBorder(null);
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        modeButton_vertex.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GuiComponents/Resources/vertexIcon_up.png"))); // NOI18N
        modeButton_vertex.setSelected(true);
        modeButton_vertex.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/GuiComponents/Resources/vertexIcon_dn.png"))); // NOI18N
        modeButton_vertex.setFocusable(false);
        modeButton_vertex.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        modeButton_vertex.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/GuiComponents/Resources/vertexIcon_dn.png"))); // NOI18N
        modeButton_vertex.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        modeButton_vertex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeButton_vertexActionPerformed(evt);
            }
        });
        jToolBar1.add(modeButton_vertex);

        modeButton_edge.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GuiComponents/Resources/edgeIcon_up.png"))); // NOI18N
        modeButton_edge.setFocusable(false);
        modeButton_edge.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        modeButton_edge.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/GuiComponents/Resources/edgeIcon_dn.png"))); // NOI18N
        modeButton_edge.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        modeButton_edge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeButton_edgeActionPerformed(evt);
            }
        });
        jToolBar1.add(modeButton_edge);

        modeButton_face.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GuiComponents/Resources/faceIcon_up.png"))); // NOI18N
        modeButton_face.setFocusable(false);
        modeButton_face.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        modeButton_face.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/GuiComponents/Resources/faceIcon_up.png"))); // NOI18N
        modeButton_face.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        modeButton_face.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeButton_faceActionPerformed(evt);
            }
        });
        jToolBar1.add(modeButton_face);

        button_growSelection.setText("[+]");
        button_growSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_growSelectionActionPerformed(evt);
            }
        });

        button_shrinkSelection.setText("[-]");
        button_shrinkSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_shrinkSelectionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(uvPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(button_growSelection)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_shrinkSelection)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 293, Short.MAX_VALUE)
                        .addComponent(button_ok)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(uvPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_ok)
                    .addComponent(button_growSelection)
                    .addComponent(button_shrinkSelection))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void button_okActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_button_okActionPerformed
	{//GEN-HEADEREND:event_button_okActionPerformed
		this.dispose();
	}//GEN-LAST:event_button_okActionPerformed

	private void mouseWheelMoved_zoom(java.awt.event.MouseWheelEvent evt)//GEN-FIRST:event_mouseWheelMoved_zoom
	{//GEN-HEADEREND:event_mouseWheelMoved_zoom

		if (System.currentTimeMillis() < lastZoomTime) //WHY DOES THIS LISTENER FIRE TWICE WHEN WITHIN THE UVMAPPANEL?????
			return;
		lastZoomTime = System.currentTimeMillis() + 10;

		int zoomIncrement = evt.getWheelRotation();
		uvPanel.zoomIncrement(zoomIncrement * -1);

		//System.out.println("mwheel");

	}//GEN-LAST:event_mouseWheelMoved_zoom

	private void formMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseReleased
	{//GEN-HEADEREND:event_formMouseReleased
		if (evt.getButton() == java.awt.event.MouseEvent.BUTTON2)
			isRMBPressed = false;
		if (evt.getButton() == java.awt.event.MouseEvent.BUTTON1)
		{
			isLMBPressed = false;
			uvPanel.stopDragging(evt.getX(), evt.getY(), evt.isControlDown());
		}
	}//GEN-LAST:event_formMouseReleased

	private void uvPanelMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_uvPanelMousePressed
	{//GEN-HEADEREND:event_uvPanelMousePressed
		if (evt.getButton() == java.awt.event.MouseEvent.BUTTON2)
			isRMBPressed = true;
		if (evt.getButton() == java.awt.event.MouseEvent.BUTTON1)
			isLMBPressed = true;

		lastMouseX = evt.getX();
		lastMouseY = evt.getY();
	}//GEN-LAST:event_uvPanelMousePressed

	private void uvPanelMouseDragged(java.awt.event.MouseEvent evt)//GEN-FIRST:event_uvPanelMouseDragged
	{//GEN-HEADEREND:event_uvPanelMouseDragged
		if (isRMBPressed)
		{
			uvPanel.offsetIncrement(evt.getX() - lastMouseX, evt.getY() - lastMouseY);
			lastMouseX = evt.getX();
			lastMouseY = evt.getY();
		}
		else if (isLMBPressed /*&& !evt.isControlDown()*/)
		{
			uvPanel.processLMBDrag(evt.getX(), evt.getY(), lastMouseX, lastMouseY, evt.isControlDown());
			lastMouseX = evt.getX();
			lastMouseY = evt.getY();
		}

	}//GEN-LAST:event_uvPanelMouseDragged

	private void uvPanelMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_uvPanelMouseReleased
	{//GEN-HEADEREND:event_uvPanelMouseReleased
		if (evt.getButton() == java.awt.event.MouseEvent.BUTTON2)
			isRMBPressed = false;
		if (evt.getButton() == java.awt.event.MouseEvent.BUTTON1)
		{
			isLMBPressed = false;
			uvPanel.stopDragging(evt.getX(), evt.getY(), evt.isControlDown());
		}
	}//GEN-LAST:event_uvPanelMouseReleased

	private void uvPanelMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_uvPanelMouseClicked
	{//GEN-HEADEREND:event_uvPanelMouseClicked
		if (evt.getButton() == java.awt.event.MouseEvent.BUTTON1)
			uvPanel.processClick(evt.getPoint(), evt.isControlDown());
	}//GEN-LAST:event_uvPanelMouseClicked

	private void formWindowGainedFocus(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowGainedFocus
	{//GEN-HEADEREND:event_formWindowGainedFocus
		uvPanel.repaint();
	}//GEN-LAST:event_formWindowGainedFocus

	private void formWindowStateChanged(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowStateChanged
	{//GEN-HEADEREND:event_formWindowStateChanged
		uvPanel.repaint();
	}//GEN-LAST:event_formWindowStateChanged

	private void modeButton_edgeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_modeButton_edgeActionPerformed
	{//GEN-HEADEREND:event_modeButton_edgeActionPerformed
		mainGui.setEditingMode(MainGui.MODE_EDGE);
		setModeButtonStates();
	}//GEN-LAST:event_modeButton_edgeActionPerformed

	private void modeButton_vertexActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_modeButton_vertexActionPerformed
	{//GEN-HEADEREND:event_modeButton_vertexActionPerformed
		mainGui.setEditingMode(MainGui.MODE_VERTEX);
		setModeButtonStates();
	}//GEN-LAST:event_modeButton_vertexActionPerformed

	private void modeButton_faceActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_modeButton_faceActionPerformed
	{//GEN-HEADEREND:event_modeButton_faceActionPerformed
		mainGui.setEditingMode(MainGui.MODE_FACE);
		setModeButtonStates();
	}//GEN-LAST:event_modeButton_faceActionPerformed

	public void setModeButtonStates()
	{
		if (mainGui.getEditingMode() == MainGui.MODE_VERTEX)
		{
			modeButton_vertex.setEnabled(false);

			modeButton_edge.setSelected(false);
			modeButton_edge.setEnabled(true);

			modeButton_face.setSelected(false);
			modeButton_face.setEnabled(true);
		}
		else if (mainGui.getEditingMode() == MainGui.MODE_EDGE)
		{
			modeButton_edge.setEnabled(false);

			modeButton_vertex.setSelected(false);
			modeButton_vertex.setEnabled(true);

			modeButton_face.setSelected(false);
			modeButton_face.setEnabled(true);
		}
		else
		{
			modeButton_face.setEnabled(false);

			modeButton_vertex.setSelected(false);
			modeButton_vertex.setEnabled(true);

			modeButton_edge.setSelected(false);
			modeButton_edge.setEnabled(true);
		}

		uvPanel.repaint();
	}

	private void button_growSelectionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_button_growSelectionActionPerformed
	{//GEN-HEADEREND:event_button_growSelectionActionPerformed

		uvPanel.growSelection();

	}//GEN-LAST:event_button_growSelectionActionPerformed

	private void button_shrinkSelectionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_button_shrinkSelectionActionPerformed
	{//GEN-HEADEREND:event_button_shrinkSelectionActionPerformed
		uvPanel.shrinkSelection();
	}//GEN-LAST:event_button_shrinkSelectionActionPerformed

	private void uvPanelMouseMoved(java.awt.event.MouseEvent evt)//GEN-FIRST:event_uvPanelMouseMoved
	{//GEN-HEADEREND:event_uvPanelMouseMoved
		uvPanel.processMouseMove(evt.getX(), evt.getY());
	}//GEN-LAST:event_uvPanelMouseMoved

	private void formWindowClosed(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosed
	{//GEN-HEADEREND:event_formWindowClosed
		this.mainGui.clearUVEditor();
	}//GEN-LAST:event_formWindowClosed

	public boolean isLMBPressed()
	{
		return this.isLMBPressed;
	}

	public boolean isRMBPressed()
	{
		return this.isRMBPressed;
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_growSelection;
    private javax.swing.JButton button_ok;
    private javax.swing.JButton button_shrinkSelection;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToggleButton modeButton_edge;
    private javax.swing.JToggleButton modeButton_face;
    private javax.swing.JToggleButton modeButton_vertex;
    private GuiComponents.UVMapPanel uvPanel;
    // End of variables declaration//GEN-END:variables
}
